// Generated by CoffeeScript 1.10.0
(function() {
  var engine;

  engine = {};

  engine.Engine = (function() {
    function Engine(grid) {
      this.grid = grid;
      this.last_tick = 0;
      this.total_tick_time = 0;
      this.tick_count = 0;
      this.state = "stopped";
    }

    Engine.prototype.start = function() {
      this.state = "running";
      return this.tick();
    };

    Engine.prototype.pause = function() {
      return this.state = "paused";
    };

    Engine.prototype.stop = function() {
      return this.state = "stopped";
    };

    Engine.prototype.reset = function() {
      var i, len, o, ref, ref1, ref2, results, x, y;
      this.last_tick = 0;
      this.total_tick_time = 0;
      this.tick_count = 0;
      if ((ref = this.state) === "stopped") {
        ref1 = this.grid.iter_obj();
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
          ref2 = ref1[i], x = ref2[0], y = ref2[1], o = ref2[2];
          results.push(o.reset());
        }
        return results;
      }
    };

    Engine.prototype.tick = function() {
      var delayed, i, j, k, l, len, len1, len2, len3, not_delayed, o, ref, ref1, ref2, ref3, ref4, tick_time, x, y;
      if ((ref = this.state) === "paused" || ref === "stopped") {
        this.reset();
        return;
      }
      tick_time = new Date().getTime();
      if (this.last_tick) {
        if (this.tick_count === 100) {
          this.total_tick_time -= this.total_tick_time / 100;
          this.tick_count--;
        }
        this.total_tick_time += tick_time - this.last_tick;
        this.tick_count++;
      }
      this.last_tick = tick_time;
      not_delayed = [];
      delayed = [];
      ref1 = this.grid.iter_obj();
      for (i = 0, len = ref1.length; i < len; i++) {
        ref2 = ref1[i], x = ref2[0], y = ref2[1], o = ref2[2];
        if (o.instant) {
          delayed.push([x, y, o]);
          continue;
        }
        o.tick(x, y, this.grid);
        not_delayed.push(o);
      }
      for (j = 0, len1 = not_delayed.length; j < len1; j++) {
        o = not_delayed[j];
        o.flush();
      }
      for (k = 0, len2 = delayed.length; k < len2; k++) {
        ref3 = delayed[k], x = ref3[0], y = ref3[1], o = ref3[2];
        if (!o.is_updated()) {
          o.tick(x, y, this.grid);
        }
      }
      for (l = 0, len3 = delayed.length; l < len3; l++) {
        ref4 = delayed[l], x = ref4[0], y = ref4[1], o = ref4[2];
        o.flush();
      }
      return this.next_tick();
    };

    Engine.prototype.next_tick = function() {
      var goal_tps, next_tick;
      goal_tps = 10;
      next_tick = new Date().getTime() - this.last_tick + (1000 / goal_tps);
      if (this.tick_count === 100) {
        next_tick = Math.round(next_tick + ((next_tick * this.tick_count) - this.total_tick_time));
      }
      return setTimeout((function(_this) {
        return function() {
          return _this.tick();
        };
      })(this), next_tick);
    };

    Engine.prototype.add = function(obj) {
      return this.objects.push(obj);
    };

    Engine.prototype.draw = function(ctx) {
      ctx.save();
      ctx.translate(ctx.canvas.width / -2, ctx.canvas.height / -2);
      ctx.fillText("TPS: " + (this.tick_count / (this.total_tick_time / 1000)).toFixed(2), 10, 10);
      return ctx.restore();
    };

    Engine.prototype.animate = function() {};

    return Engine;

  })();

  window.engine = engine;

}).call(this);

//# sourceMappingURL=engine.js.map
